import streamlit as st
import pandas as pd
import os
import io
import base64
import zipfile

st.title("Traitement de fichiers CSV/Excel fournisseur")

st.info("""
üìã **Instructions importantes :**
- **Fichiers Excel** : Si le fichier ne se traite pas, ouvrez-le dans Excel et sauvegardez en format .xlsx
- **Fichiers CSV** : L'application d√©tecte automatiquement le s√©parateur (virgule, point-virgule, tabulation)
- **Format recommand√©** : .xlsx pour une meilleure compatibilit√©
""")

uploaded_files = st.file_uploader("D√©posez vos fichiers CSV ou Excel", type=["csv", "xlsx"], accept_multiple_files=True)

if uploaded_files:
    for uploaded_file in uploaded_files:
        st.subheader(f"Fichier : {uploaded_file.name}")
        # Lecture du fichier upload√© selon l'extension
        if uploaded_file.name.lower().endswith('.xlsx'):
            try:
                df = pd.read_excel(uploaded_file, dtype=str)
            except Exception as e:
                st.error(f"Erreur lors de la lecture du fichier Excel : {e}")
                st.info("üí° SOLUTION : Enregistrez le fichier au format .xlsx dans Excel")
                st.info("1. Ouvrez le fichier dans Excel")
                st.info("2. Fichier ‚Üí Enregistrer sous ‚Üí Classeur Excel (.xlsx)")
                st.info("3. Rechargez le fichier dans l'application")
                continue
        else:
            # Essayer diff√©rents encodages et s√©parateurs pour les fichiers CSV
            separators = [';', ',', '\t']  # Point-virgule, virgule, tabulation
            encodings = ['utf-8', 'latin-1', 'cp1252']
            
            df = None
            for sep in separators:
                for encoding in encodings:
                    try:
                        df = pd.read_csv(uploaded_file, sep=sep, dtype=str, encoding=encoding)
                        st.success(f"Fichier CSV lu avec succ√®s (s√©parateur: '{sep}', encodage: {encoding})")
                        break
                    except Exception:
                        continue
                if df is not None:
                    break
            
            if df is None:
                st.error("Impossible de lire le fichier CSV. V√©rifiez le format et l'encodage.")
                continue

        # Colonnes √† garder
        colonnes_a_garder = [
            'R√©f Fournisseur',
            'D√©signation',
            'Date besoin',
            'Version',
            'Ebauche',
            'Qt√©',
            'Prix',
            'Bande'
        ]
        df = df[colonnes_a_garder].copy()

        # Ajouter colonne vide Annul√©
        df['Annul√©'] = ''

        # Renommer les colonnes
        renommage = {
            'R√©f Fournisseur': 'R√©f√©rence',
            'D√©signation': 'D√©signation',
        }
        df = df.rename(columns=renommage)

        # Convertir 'Date besoin' en datetime pour groupby (format automatique)
        df['Date besoin'] = pd.to_datetime(df['Date besoin'], errors='coerce')

        # Groupby sur R√©f√©rence, Ebauche, Version
        resultat = df.groupby(['R√©f√©rence', 'Ebauche', 'Version'], as_index=False).agg({
            'D√©signation': 'first',
            'Date besoin': 'min',
            'Qt√©': lambda x: pd.to_numeric(x, errors='coerce').sum(),
            'Prix': 'first',
            'Bande': 'first',
            'Annul√©': 'first'
        })

        # Reconvertir 'Date besoin' en texte
        resultat['Date besoin'] = resultat['Date besoin'].dt.strftime('%d/%m/%Y')

        # Nettoyer la colonne Prix
        resultat['Prix'] = resultat['Prix'].str.replace('‚Ç¨', '', regex=False)
        resultat['Prix'] = resultat['Prix'].str.replace(',', '.', regex=False)
        resultat['Prix'] = resultat['Prix'].astype(float)
        def format_prix(x):
            if x == int(x):
                return str(int(x))
            else:
                return str(x).replace('.', ',')
        resultat['Prix'] = resultat['Prix'].apply(format_prix)

        # Ajouter colonne Commande (nom du fichier sans extension)
        nom_commande = os.path.splitext(uploaded_file.name)[0]
        resultat.insert(0, 'Commande', nom_commande)

        # R√©organiser les colonnes
        ordre_colonnes = [
            'Commande',
            'R√©f√©rence',
            'D√©signation',
            'Date besoin',
            'Ebauche',
            'Version',
            'Qt√©',
            'Annul√©',
            'Prix',
            'Bande'
        ]
        resultat = resultat[ordre_colonnes]

        # Nettoyer les colonnes texte pour √©viter les caract√®res bizarres
        for col in resultat.select_dtypes(include='object').columns:
            resultat[col] = resultat[col].astype(str).apply(lambda x: x.encode('utf-8', errors='replace').decode('utf-8'))

        # Remplacer les None/NaN ou 'None' par des cases vides
        resultat = resultat.replace("None", "").fillna("")

        # Affichage du r√©sultat
        st.write("Aper√ßu du fichier trait√© :")
        st.dataframe(resultat)

        # Pr√©paration du CSV √† t√©l√©charger
        csv = resultat.to_csv(sep=',', index=False, encoding='utf-8-sig')
        st.download_button(
            label=f"T√©l√©charger le CSV trait√© : {nom_commande}.csv",
            data=csv,
            file_name=f"{nom_commande}.csv",
            mime="text/csv"
        )
else:
    st.info("Veuillez d√©poser un ou plusieurs fichiers CSV ou Excel pour commencer.") 